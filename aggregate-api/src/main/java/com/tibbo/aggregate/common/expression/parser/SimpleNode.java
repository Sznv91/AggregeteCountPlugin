/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.tibbo.aggregate.common.expression.parser;

import com.tibbo.aggregate.common.expression.*;

public class SimpleNode implements Node
{
  
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected ExpressionParser parser;
  protected Token firstToken;
  protected Token lastToken;
  
  public SimpleNode(int i)
  {
    id = i;
  }
  
  public SimpleNode(ExpressionParser p, int i)
  {
    this(i);
    parser = p;
  }
  
  @Override
  public void jjtOpen()
  {
  }
  
  @Override
  public void jjtClose()
  {
  }
  
  @Override
  public void jjtSetParent(Node n)
  {
    parent = n;
  }
  
  @Override
  public Node jjtGetParent()
  {
    return parent;
  }
  
  @Override
  public void jjtAddChild(Node n, int i)
  {
    if (children == null)
    {
      children = new Node[i + 1];
    }
    else if (i >= children.length)
    {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }
  
  @Override
  public Node jjtGetChild(int i)
  {
    return children[i];
  }
  
  @Override
  public int jjtGetNumChildren()
  {
    return (children == null) ? 0 : children.length;
  }
  
  public void jjtSetValue(Object value)
  {
    this.value = value;
  }
  
  public Object jjtGetValue()
  {
    return value;
  }
  
  public Token jjtGetFirstToken()
  {
    return firstToken;
  }
  
  public void jjtSetFirstToken(Token token)
  {
    this.firstToken = token;
  }
  
  public Token jjtGetLastToken()
  {
    return lastToken;
  }
  
  public void jjtSetLastToken(Token token)
  {
    this.lastToken = token;
  }
  
  /** Accept the visitor. **/
  public AttributedObject jjtAccept(ExpressionParserVisitor visitor, com.tibbo.aggregate.common.expression.EvaluationEnvironment data)
  {
    return visitor.visit(this, data);
  }
  
  /** Accept the visitor. **/
  public Object childrenAccept(ExpressionParserVisitor visitor, com.tibbo.aggregate.common.expression.EvaluationEnvironment data)
  {
    if (children != null)
    {
      for (int i = 0; i < children.length; ++i)
      {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }
  
  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */
  
  @Override
  public String toString()
  {
    return ExpressionParserTreeConstants.jjtNodeName[id];
  }
  
  public String toString(String prefix)
  {
    return prefix + toString();
  }
  
  /* Override this method if you want to customize how the node dumps
     out its children. */
  
  public void dump(String prefix)
  {
    System.out.println(toString(prefix));
    if (children != null)
    {
      for (int i = 0; i < children.length; ++i)
      {
        SimpleNode n = (SimpleNode) children[i];
        if (n != null)
        {
          n.dump(prefix + " ");
        }
      }
    }
  }
}

/* JavaCC - OriginalChecksum=f560d94463de9ffebea717bc42fb8af1 (do not edit this line) */
