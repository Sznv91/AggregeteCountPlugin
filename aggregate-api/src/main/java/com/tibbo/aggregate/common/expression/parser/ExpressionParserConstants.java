/* Generated By:JJTree&JavaCC: Do not edit this line. ExpressionParserConstants.java */
package com.tibbo.aggregate.common.expression.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ExpressionParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 9;
  /** RegularExpression Id. */
  int OR = 11;
  /** RegularExpression Id. */
  int AND = 12;
  /** RegularExpression Id. */
  int NOT = 13;
  /** RegularExpression Id. */
  int BITWISE_OR = 14;
  /** RegularExpression Id. */
  int BITWISE_XOR = 15;
  /** RegularExpression Id. */
  int BITWISE_AND = 16;
  /** RegularExpression Id. */
  int BITWISE_NOT = 17;
  /** RegularExpression Id. */
  int TRUE = 18;
  /** RegularExpression Id. */
  int FALSE = 19;
  /** RegularExpression Id. */
  int NULL = 20;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 21;
  /** RegularExpression Id. */
  int HEX_LITERAL = 22;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 23;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 24;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 25;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 26;
  /** RegularExpression Id. */
  int EXPONENT = 27;
  /** RegularExpression Id. */
  int STRING_LITERAL = 28;
  /** RegularExpression Id. */
  int PLUS = 29;
  /** RegularExpression Id. */
  int MINUS = 30;
  /** RegularExpression Id. */
  int MUL = 31;
  /** RegularExpression Id. */
  int DIV = 32;
  /** RegularExpression Id. */
  int MOD = 33;
  /** RegularExpression Id. */
  int QUESTION = 34;
  /** RegularExpression Id. */
  int COLON = 35;
  /** RegularExpression Id. */
  int COMMA = 36;
  /** RegularExpression Id. */
  int EQ = 37;
  /** RegularExpression Id. */
  int NE = 38;
  /** RegularExpression Id. */
  int MATCH = 39;
  /** RegularExpression Id. */
  int LT = 40;
  /** RegularExpression Id. */
  int GT = 41;
  /** RegularExpression Id. */
  int LTE = 42;
  /** RegularExpression Id. */
  int GTE = 43;
  /** RegularExpression Id. */
  int LBRAKET = 44;
  /** RegularExpression Id. */
  int RBRAKET = 45;
  /** RegularExpression Id. */
  int LBRACE = 46;
  /** RegularExpression Id. */
  int RBRACE = 47;
  /** RegularExpression Id. */
  int RIGHT_SHIFT = 48;
  /** RegularExpression Id. */
  int URIGHT_SHIFT = 49;
  /** RegularExpression Id. */
  int LEFT_SHIFT = 50;
  /** RegularExpression Id. */
  int IDENTIFIER = 51;
  /** RegularExpression Id. */
  int URICHAR = 52;
  /** RegularExpression Id. */
  int LETTER = 53;
  /** RegularExpression Id. */
  int DIGIT = 54;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "\"//\"",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "<token of kind 10>",
    "\"||\"",
    "\"&&\"",
    "\"!\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"~\"",
    "\"TRUE\"",
    "\"FALSE\"",
    "\"NULL\"",
    "<INTEGER_LITERAL>",
    "<HEX_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<OCTAL_LITERAL>",
    "<BINARY_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"?\"",
    "\":\"",
    "\",\"",
    "\"==\"",
    "\"!=\"",
    "\"~=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\">>\"",
    "\">>>\"",
    "\"<<\"",
    "<IDENTIFIER>",
    "<URICHAR>",
    "<LETTER>",
    "<DIGIT>",
  };

}
